<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="secondclass.mapper.TUserMapper">
    <resultMap id="BaseResultMap" type="TUser">
        <!--<constructor>
            <idArg column="id" javaType="int" />
            <arg column="user_name" javaType="String" />
        </constructor>-->
        <!--
            id和result属性：
                property：映射列结果的字段或者属性
                column：SQL的列
                javaTYpe：配置的Java的类型
                jdbcType：配置数据库类型
                typeHandler：类型处理器
        -->
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="user_name" property="userName" jdbcType="VARCHAR" />
        <result column="real_name" property="realName" jdbcType="VARCHAR" />
        <result column="position_id" property="positionId" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List">
        id,user_name,real_name,sex,mobile,email,note,position_id
    </sql>
    <select id="selectByEmailAndSex1" resultMap="BaseResultMap" parameterType="map">
        select
            <include refid="Base_Column_List" />
        from t_user a
        where a.email like CONCAT('%',#{email},'%') and
        a.sex = #{sex}
    </select>
    <select id="selectByEmailAndSex2" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from t_user a
        where a.email like CONCAT('%',#{email},'%') and
        a.sex = #{sex}
    </select>
    <select id="selectByEmailAndSex3" resultMap="BaseResultMap" parameterType="EmailSexBean">
        select
        <include refid="Base_Column_List" />
        from t_user a
        where a.email like CONCAT('%',#{email},'%') and
        a.sex = #{sex}
    </select>
    <select id="selectBySymbol" resultMap="BaseResultMap">
        select #{inCol}
        from ${tableName} a
        where a.sex = #{sex}
        order by ${orderStr}
    </select>
    <!--
        正如你所看到的，我们可以传入一个简单的参数，比如int,double等，也可以传入JavaBean。有时候我们需要处理一些特殊的情况，我们可以指定特定的类型，以确定使用哪个typeHandler处理它们
        #{age,jdbcType=INTEGER,javaType=int,typeHandler=xxx]
    -->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="int">
        select
            <include refid="Base_Column_List" />
        from t_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="int">
        delete from t_user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert1" parameterType="TUser" useGeneratedKeys="true" keyProperty="id" >
        insert
            into t_user(id,user_name,real_name,sex,mobile,email,note,position_id)
        values (#{id,jdbcType=INTEGER},#{userName,jdbcType=VARCHAR},#{realName,jdbcType=VARCHAR},#{sex,jdbcType=TINYINT},
                #{mobile,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{note,jdbcType=VARCHAR},#{positionId,jdbcType=INTEGER})
    </insert>
    <insert id="insert2" parameterType="TUser">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert
            into t_user(id,user_name,real_name,sex,mobile,email,note,position_id)
        values (#{id,jdbcType=INTEGER},#{userName,jdbcType=VARCHAR},#{realName,jdbcType=VARCHAR},#{sex,jdbcType=TINYINT},
                #{mobile,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{note,jdbcType=VARCHAR},#{positionId,jdbcType=INTEGER})
    </insert>
    <update id="updateByPrimaryKey" parameterType="TUser">
        update
            set user_name = #{userName,jdbcType=VARCHAR},
                real_name = #{realName,jdbcType=VARCHAR},
                sex = #{sex,jdbcType=TINYINT},
                mobile = #{mobile,jdbcType=VARCHAR},
                note = #{note,jdbcType=VARCHAR},
                position_id = #{position .id,jdbcType=INTEGER}
                where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>